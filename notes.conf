# 1- cria projeto
django-admin startproject myproject

# 2- testar
# manage.py - utilitário de linha de comando do DJANGO
python manage.py runserver

# 3- configurar Banco
# settings.py
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # },
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dice-----------------',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

# 4- cria tabelas django
# o banco precisa existir
python manage.py migrate

# 5- cria super usuario
python manage.py createsuperuser



# 6- criar outras urls como
# alunos para gerenciar alunos e declarar em urlpatterns

# 7- start app (models(aluno))
python manage startapp myapp

python manage startapp academico

# ainda não descobri como relacionar estando em apps diferentes
# python .\manage.py startapp funcionario
# python .\manage.py startapp aluno
# python .\manage.py startapp horario
# python .\manage.py startapp turma
# python .\manage.py startapp historico
# python .\manage.py startapp historicoTurma


# 8- criar primeira view
# criar arquivo views.py dentro do app
# from django.http import HttpResponse
# criar function based view
#     def home(request):
# #     request = 'ola, mundo'
# #     response = HttpResponse(request)
#     return response
# importar home em app/urls.py
# from .views import home
# declarar nova url em urlpatterns
# urlpatterns = [
#     path('admin/', admin.site.urls),
#     path('', home),
# ]
# importar app em projeto/urls.py
# from django.urls import path, include
# urlpatterns = [
#     path('', include('aluno.urls')),
#     path('admin/', admin.site.urls),
# ]
# manter path vazio pois ele importa tudo que está em aluno.urls
# views dentro do projeto não é o certo
# o correto é dentro de urls.py ter as urls apontando para os apps


# 9- criando models
# criar classe Aluno herdando models.Model
# class Aluno(models.Model):

# 10- registrar novo app em settings
# dizer ao Django que vai usar esses modelos.
# Faça isso editando seu arquivo de configurações e
# alterando a INSTALLED_APPS
# INSTALLED_APPS = [
#     #     ***
#     'aluno',
# ]

# 11- makemigrations
'''
O comando makemigrations analisa se foram feitas mudanças
nos modelos e, em caso positivo, cria novas migrações ( Migrations )
para alterar a estrutura do seu banco de dados,
refletindo as alterações feitas
'''
python manage makemigrations

# para atualizar as alterações roda o :
python manage migrate


# 15- para testar em linha de comando
python manage shell
# from aluno.models import Aluno
# from aluno.models import Aluno
# a = Aluno.objects.all()

# criar os apps / tabelas
# https://docs.djangoproject.com/en/4.1/topics/db/

# 16- colocar app no admin do Django
# app/admin, importar app
# from .models import Aluno


# 17- registrar app
# admin.site.register(Aluno)
# or
# from . import models
# @admin.register(models.Turma)
# class TurmaAdmin(admin.ModelAdmin):
#     # fields = () #campos para cadastrar
#     # list_display = () # grid de visualizações
#     # list_filter = ()
#     # search_fields = ()
#     # filter_horizontal = ('aluno',)
#     pass

# 18- configurar templates
# settings.py TEMPLATES
# var DIRS:
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# na raiz do projeto ou repositorio
# criar pasta com nome da var setada

# 19- nas view do app
# renderizar template
# substituir HttpResponse por render
# from django.shortcuts import render
# old
def home(request):
    request = 'ola, mundo'
    response = HttpResponse(request)
    return response
#     new
def home(request):

    result = {'hello': 'ola mundo'}

    response = render(
        request=request,
        template_name='index.html',
        context=result
    )

    return response

# injetando no html
# SISTEMA DE TEMPLATE JINJA
{{ hello }}

# if
{% if sexo == 'm' %}
    ola, senhor {{ nome }}
{% elif sexo == 'f' %}
    ola, senhora {{ nome }}
{% else %}
    ola, {{ nome }}
{% endif %}

# loop
lista = [
    {'nome': 'joao', 'sexo': 'm'},
    {'nome': 'maria', 'sexo': 'f'},
    {'nome': 'jose', 'sexo': 'm'},
]

{{ for pessoa in lista }}
    ola {{ pessoa.nome }} <br>
{{ endfor }}

# blocos e herança de templates
# criar arquivo base.html
# dentro de body criar o bloco main
{% block main %}
{% endblock %}

# dentro do index
# onde tem o conteudo
# extender o index para o base.html
{% extends 'base.html' %}
{% block main %}
<conteudo>
{% endblock %}

# title
base.html
{{% block title %}} {{% endblock %}}

index.html
{{% block title %}}
    <title> teste home </title>
{{% endblock %}}


# testar
# estemder body
# estemder head
# estemder footer

# adicionando bootstraop
# am base.html adicionar
<style> OR link

</ style>

# include
# inclui blocos de codigo

{{% include 'page.html' %}}

# injetando variavel
{{% include 'page.html' with <nome_var_na_outra_pag>=<var> %}}

# arqucis estaticos
# js, css, etc...

# em settings criar a var STATIC_ROOT
# seta a pasta onde o DJANGO irá reunir os
# arquivos estaticos
STATIC_ROOT = '<static_folder>'

# lista de pastas
STATICFILES_DIRS = [
]

# arquivos de media
# em urls importar

from django.conf import settings
from django.conf.urls.static import static

# em url urlpatterns concatenar

urlpatterns = [
#     ****
] + static(
    settings.MEDIA_URL,
    document_root=settings.MEDIA_ROOT
)

# timezone em settings
LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'

# allow localhost










